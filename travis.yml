# Language of the project.
language: php

dist: bionic
sudo: required

# Ensure DB services are running.
services:
  - mysql
  - postgresql

# Installs the updated version of PostgreSQL and extra APT packages.
addons:
  firefox: "47.0.1"
  apt:
    packages:
      - openjdk-8-jre-headless
      - chromium-chromedriver

# Cache NPM's and Composer's caches to speed up build times.
cache:
  directories:
    - $HOME/.composer/cache
    - $HOME/.npm

# Determines which versions of PHP to test against.  Each version
# listed here will create a separate build and run the tests against that
# version of PHP.
php:
 - 7.2

 # This section sets up the environment variables for the build.
env:
  global:
    # This line determines which version branch of Moodle to test against.
    - MOODLE_BRANCH=MOODLE_38_STABLE
    # This matrix is used for testing against multiple databases.  So for
    # each version of PHP being tested, one build will be created for each
    # database listed here.
 matrix:
    - DB=pgsql
    - DB=mysqli
    - MOODLE_BRANCH=master

before install:
  # This disables XDebug which should speed up the build.
  - phpenv config-rm xdebug.ini
  # This installs NodeJS which is used by Grunt, etc.
  - nvm install 14.2.0
  - nvm use 14.2.0
  # Currently we are inside a clone of the repository.  We move up two
  # directories to build the project.
  - cd ../..
# Install this project into a directory called "ci".
  - composer create-project -n --no-dev --prefer-dist moodlerooms/moodle-plugin-ci ci ^2
  - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"

  # The standard install step.
install:
    # Run the default install. The overview of what this does:
    #    - Clone the Moodle project into a directory called moodle.
    #    - Create a data directory called moodledata.
    #    - Create Moodle config.php, database, etc.
    #    - Copy your plugin(s) into Moodle.
    #    - Run Composer install within Moodle.
    #    - Run NPM install in Moodle and in your plugin if it has a "package.json".
    #    - Run "grunt ignorefiles" within Moodle to update ignore file lists.
    #    - If your plugin has Behat features, then Behat will be setup.
    #    - If your plugin has unit tests, then PHPUnit will be setup.
      - moodle-plugin-ci install

script:
  # This is basically "integration" testing.
  # This step lints your PHP files to check for syntax errors.
  - moodle-plugin-ci phplint
  # This step runs the PHP Copy/Paste Detector on your plugin.
  # This helps to find code duplication.
  - moodle-plugin-ci phpcpd
  # This step runs the PHP Mess Detector on your plugin. This helps to find
  # potential problems with your code which can result in
  # refactoring opportunities.
  - moodle-plugin-ci phpmd || true
  # This step runs the Moodle Code Checker to make sure that your plugin
  # conforms to the Moodle coding standards.
  # To fail on warnings use --max-warnings 0
  - moodle-plugin-ci codechecker
  # This step runs Moodle PHPDoc checker on your plugin.
  - moodle-plugin-ci phpdoc
  # This step runs some light validation on the plugin file structure
  # and code.  Validation can be plugin specific.
  - moodle-plugin-ci validate
  # This step validates your plugin's upgrade steps.
  - moodle-plugin-ci savepoints
  # This step validates the HTML and Javascript in your Mustache templates.
  - moodle-plugin-ci mustache
  # This step runs Grunt tasks on the plugin.  By default, it tries to run
  # tasks relevant to your plugin and Moodle version, but you can run
  # specific tasks by passing them as options,
  # EG: moodle-plugin-ci grunt -t task1 -t task2
  # To fail on eslint warnings use --max-lint-warnings 0
  - moodle-plugin-ci grunt
  # This step runs the PHPUnit tests of your plugin.  If your plugin has
  # PHPUnit tests, then it is highly recommended that you keep this step.
  # - moodle-plugin-ci phpunit --coverage-text
  # - moodle-plugin-ci behat --profile chrome
